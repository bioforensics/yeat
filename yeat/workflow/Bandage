# -------------------------------------------------------------------------------------------------
# Copyright (c) 2022, DHS. This file is part of YEAT: http://github.com/bioforensics/yeat
#
# This software was prepared for the Department of Homeland Security (DHS) by the Battelle National
# Biodefense Institute, LLC (BNBI) as part of contract HSHQDC-15-C-00064 to manage and operate the
# National Biodefense Analysis and Countermeasures Center (NBACC), a Federally Funded Research and
# Development Center.
# -------------------------------------------------------------------------------------------------

from glob import glob
from pathlib import Path
import re
from yeat.workflow.aux import get_and_filter_contig_files


rule spades:
    output:
        status="analysis/{sample}/{readtype}/{label}/spades/bandage/.done"
    input:
        report="analysis/{sample}/{readtype}/{label}/spades/quast/report.html"
    params:
        gfa=lambda wildcards:
            glob(f"analysis/{wildcards.sample}/{wildcards.readtype}/{wildcards.label}/spades/*.gfa")
            + glob(f"analysis/{wildcards.sample}/{wildcards.readtype}/{wildcards.label}/spades/*.fastg"),
        outdir="analysis/{sample}/{readtype}/{label}/spades/bandage"
    run:
        for gfa in params.gfa:
            filename = Path(gfa).stem
            shell("Bandage image {gfa} {params.outdir}/{filename}.jpg")
        shell("touch {output.status}")


rule megahit:
    output:
        status="analysis/{sample}/{readtype}/{label}/megahit/bandage/.done"
    input:
        report="analysis/{sample}/{readtype}/{label}/megahit/quast/report.html"
    params:
        fa=lambda wildcards: get_and_filter_contig_files(wildcards.sample, wildcards.readtype, wildcards.label),
        intermediates_dir="analysis/{sample}/{readtype}/{label}/megahit/intermediate_contigs",
        outdir="analysis/{sample}/{readtype}/{label}/megahit/bandage"
    run:
        for fa in params.fa:
            kmer = re.findall(r'k\d+.contigs.fa', fa)[0].split(".")[0][1:]
            filename = Path(fa).stem
            fastg = f"{params.intermediates_dir}/{filename}.fastg"
            shell("megahit_toolkit contig2fastg {kmer} {fa} > {fastg}")
            shell("Bandage image {fastg} {params.outdir}/{filename}.jpg")
        shell("touch {output.status}")


rule unicycler:
    output:
        status="analysis/{sample}/{readtype}/{label}/unicycler/bandage/.done"
    input:
        report="analysis/{sample}/{readtype}/{label}/unicycler/quast/report.html"
    params:
        gfa=lambda wildcards: glob(f"analysis/{wildcards.sample}/{wildcards.readtype}/{wildcards.label}/unicycler/*.gfa"),
        outdir="analysis/{sample}/{readtype}/{label}/unicycler/bandage"
    run:
        for gfa in params.gfa:
            filename = Path(gfa).stem
            shell("Bandage image {gfa} {params.outdir}/{filename}.jpg")
        shell("touch {output.status}")


rule flye:
    output:
        status="analysis/{sample}/{readtype}/{label}/flye/bandage/.done"
    input:
        report="analysis/{sample}/{readtype}/{label}/flye/quast/report.html"
    params:
        gfa=lambda wildcards:
            glob(f"analysis/{wildcards.sample}/{wildcards.readtype}/{wildcards.label}/flye/30-contigger/*.gfa")
            + glob(f"analysis/{wildcards.sample}/{wildcards.readtype}/{wildcards.label}/flye/40-polishing/*.gfa")
            + glob(f"analysis/{wildcards.sample}/{wildcards.readtype}/{wildcards.label}/flye/*.gfa"),
        outdir="analysis/{sample}/{readtype}/{label}/flye/bandage"
    run:
        for gfa in params.gfa:
            filename = Path(gfa).stem
            shell("Bandage image {gfa} {params.outdir}/{filename}.jpg")
        shell("touch {output.status}")


rule canu:
    output:
        status="analysis/{sample}/{readtype}/{label}/canu/bandage/.done"
    input:
        report="analysis/{sample}/{readtype}/{label}/canu/quast/report.html"
    params:
        gfa=lambda wildcards: glob(f"analysis/{wildcards.sample}/{wildcards.readtype}/{wildcards.label}/canu/unitigging/4-unitigger/*.gfa"),
        outdir="analysis/{sample}/{readtype}/{label}/canu/bandage"
    run:
        for gfa in params.gfa:
            filename = Path(gfa).stem
            shell("Bandage image {gfa} {params.outdir}/{filename}.jpg")
        shell("touch {output.status}")


rule hifiasm:
    output:
        status="analysis/{sample}/{readtype}/{label}/hifiasm/bandage/.done"
    input:
        report="analysis/{sample}/{readtype}/{label}/hifiasm/quast/report.html"
    params:
        gfa=lambda wildcards: glob(f"analysis/{wildcards.sample}/{wildcards.readtype}/{wildcards.label}/hifiasm/*.gfa"),
        outdir="analysis/{sample}/{readtype}/{label}/hifiasm/bandage"
    run:
        for gfa in params.gfa:
            filename = Path(gfa).stem
            shell("Bandage image {gfa} {params.outdir}/{filename}.jpg")
        shell("touch {output.status}")


rule hifiasm_meta:
    output:
        status="analysis/{sample}/{readtype}/{label}/hifiasm_meta/bandage/.done"
    input:
        report="analysis/{sample}/{readtype}/{label}/hifiasm_meta/quast/report.html"
    params:
        gfa=lambda wildcards: glob(f"analysis/{wildcards.sample}/{wildcards.readtype}/{wildcards.label}/hifiasm_meta/*.gfa"),
        outdir="analysis/{sample}/{readtype}/{label}/hifiasm_meta/bandage"
    run:
        for gfa in params.gfa:
            filename = Path(gfa).stem
            shell("Bandage image {gfa} {params.outdir}/{filename}.jpg")
        shell("touch {output.status}")


rule metamdbg:
    output:
        status="analysis/{sample}/{readtype}/{label}/metamdbg/bandage/.done"
    input:
        report="analysis/{sample}/{readtype}/{label}/metamdbg/quast/report.html"
    params:
        gfa="analysis/{sample}/{readtype}/{label}/metamdbg/tmp/assembly_graph.gfa",
        outdir="analysis/{sample}/{readtype}/{label}/metamdbg/bandage"
    shell:
        """
        Bandage image {params.gfa} {params.outdir}/assembly_graph.jpg
        touch {output.status}
        """


rule penguin:
    output:
        status="analysis/{sample}/{readtype}/{label}/penguin/bandage/.done"
    input:
        report="analysis/{sample}/{readtype}/{label}/penguin/quast/report.html"
    params:
        contigs="analysis/{sample}/{readtype}/{label}/penguin/contigs.fasta",
        gfa="analysis/{sample}/{readtype}/{label}/penguin/contigs.gfa",
        outdir="analysis/{sample}/{readtype}/{label}/penguin/bandage"
    shell:
        """
        gfastats {params.contigs} -o gfa > {params.gfa}
        Bandage image {params.gfa} {params.outdir}/assembly_graph.jpg
        touch {output.status}
        """

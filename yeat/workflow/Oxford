# -------------------------------------------------------------------------------------------------
# Copyright (c) 2023, DHS. This file is part of YEAT: http://github.com/bioforensics/yeat
#
# This software was prepared for the Department of Homeland Security (DHS) by the Battelle National
# Biodefense Institute, LLC (BNBI) as part of contract HSHQDC-15-C-00064 to manage and operate the
# National Biodefense Analysis and Countermeasures Center (NBACC), a Federally Funded Research and
# Development Center.
# -------------------------------------------------------------------------------------------------

from yeat.workflow.aux import get_canu_readtype_flag


rule nanofilt:
    output:
        filtered_reads="seq/nanofilt/{sample}/{readtype}/highQuality-reads.fq.gz"
    input:
        raw_reads="seq/input/{sample}/{readtype}/combined-reads.fq.gz"
    threads: 128
    resources:
        cpus_per_task=128
    params:
        filter="-q 10"
    shell:
        """
        gunzip -c {input.raw_reads} | NanoFilt {params.filter} | gzip > {output.filtered_reads}
        """


rule nanoplot:
    output:
        raw_report="seq/nanoplot/{sample}/{readtype}/raw_LengthvsQualityScatterPlot_dot.pdf",
        filtered_report="seq/nanoplot/{sample}/{readtype}/filtered_LengthvsQualityScatterPlot_dot.pdf"
    input:
        raw_reads="seq/input/{sample}/{readtype}/combined-reads.fq.gz",
        filtered_reads="seq/nanofilt/{sample}/{readtype}/highQuality-reads.fq.gz"
    threads: 128
    resources:
        cpus_per_task=128
    params:
        outdir="seq/nanoplot/{sample}/{readtype}"
    shell:
        """
        NanoPlot -t {threads} --fastq {input.raw_reads} -o {params.outdir} --N50 -p raw_ --title "{wildcards.sample} Raw" -f pdf --plots dot
        NanoPlot -t {threads} --fastq {input.filtered_reads} -o {params.outdir} --N50 -p filtered_ --title "{wildcards.sample} Filtered" -f pdf --plots dot
        """


rule flye:
    output:
        contigs="analysis/{sample}/{readtype,nano-raw|nano-corr|nano-hq}/{label}/flye/contigs.fasta"
    input:
        reads="seq/nanofilt/{sample}/{readtype}/highQuality-reads.fq.gz"
    threads: 128
    resources:
        cpus_per_task=128
    params:
        outdir="analysis/{sample}/{readtype}/{label}/flye",
        extra_args=lambda wildcards: config["assemblies"][wildcards.label].extra_args
    shell:
        """
        flye --{wildcards.readtype} {input.reads} -t {threads} -o {params.outdir} {params.extra_args}
        ln -s assembly.fasta {output.contigs}
        """


rule canu:
    output:
        contigs="analysis/{sample}/{readtype,nano-raw|nano-corr|nano-hq}/{label}/canu/contigs.fasta"
    input:
        reads="seq/nanofilt/{sample}/{readtype}/highQuality-reads.fq.gz"
    threads: 128
    resources:
        cpus_per_task=128
    params:
        outdir="analysis/{sample}/{readtype}/{label}/canu",
        extra_args=lambda wildcards: config["assemblies"][wildcards.label].extra_args
    shell:
        """
        canu -nanopore {input.reads} maxThreads={threads} -p {wildcards.sample} -d {params.outdir} {params.extra_args} useGrid=false
        ln -s {wildcards.sample}.contigs.fasta {output.contigs}
        """


rule unicycler:
    output:
        contigs="analysis/{sample}/{readtype,nano-raw|nano-corr|nano-hq}/{label}/unicycler/contigs.fasta"
    input:
        reads="seq/nanofilt/{sample}/{readtype}/highQuality-reads.fq.gz"
    threads: 128
    resources:
        cpus_per_task=128
    params:
        outdir="analysis/{sample}/{readtype}/{label}/unicycler",
        extra_args=lambda wildcards: config["assemblies"][wildcards.label].extra_args
    shell:
        """
        unicycler -l {input.reads} -t {threads} -o {params.outdir} {params.extra_args}
        ln -s assembly.fasta {output.contigs}
        """

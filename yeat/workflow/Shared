# -------------------------------------------------------------------------------------------------
# Copyright (c) 2023, DHS. This file is part of YEAT: http://github.com/bioforensics/yeat
#
# This software was prepared for the Department of Homeland Security (DHS) by the Battelle National
# Biodefense Institute, LLC (BNBI) as part of contract HSHQDC-15-C-00064 to manage and operate the
# National Biodefense Analysis and Countermeasures Center (NBACC), a Federally Funded Research and
# Development Center.
# -------------------------------------------------------------------------------------------------

from shutil import copyfile
from yeat.workflow.aux import combine, get_genome_size, get_avg_read_length, get_down, get_seed, print_downsample_values








rule mash:
    output:
        sketch="seq/mash/{sample}/paired/{sample}.R1.fq.gz.msh",
        mash_report="seq/mash/{sample}/paired/{sample}.report.tsv"
    input:
        read1="seq/fastp/{sample}/paired/{sample}.R1.fq.gz"
    shell:
        """
        mash sketch {input.read1} -o {output.sketch}
        mash info -t {output.sketch} > {output.mash_report}
        """


rule downsample:
    output:
        sub1="seq/downsample/{sample}/paired/{sample}.R1.fq.gz",
        sub2="seq/downsample/{sample}/paired/{sample}.R2.fq.gz"
    input:
        read1="seq/fastp/{sample}/paired/{sample}.R1.fq.gz",
        read2="seq/fastp/{sample}/paired/{sample}.R2.fq.gz",
        mash_report="seq/mash/{sample}/paired/{sample}.report.tsv"
    params:
        coverage_depth=lambda wildcards: config["samples"][wildcards.sample].coverage_depth,
        downsample=lambda wildcards: config["samples"][wildcards.sample].downsample,
        fastp_report="seq/fastp/{sample}/paired/fastp.json",
        genome_size=lambda wildcards: config["samples"][wildcards.sample].genome_size,
        seed=config["seed"],
        outdir="seq/downsample/{sample}/paired"
    run:
        if params.downsample == -1:
            copyfile(input.read1, output.sub1)
            copyfile(input.read2, output.sub2)
            return
        genome_size = get_genome_size(params.genome_size, input.mash_report)
        avg_read_length = get_avg_read_length(params.fastp_report)
        down = get_down(params.downsample, genome_size, params.coverage_depth, avg_read_length)
        seed = get_seed(params.seed)
        print_downsample_values(genome_size, avg_read_length, params.coverage_depth, down, seed)
        shell("seqtk sample -s {seed} {input.read1} {down} > {params.outdir}/{wildcards.sample}.R1.fq")
        shell("seqtk sample -s {seed} {input.read2} {down} > {params.outdir}/{wildcards.sample}.R2.fq")
        shell("gzip -f {params.outdir}/*")





# rule quast:
#     output:
#         report="analysis/{sample}/{readtype}/{label}/{assembler}/quast/report.html"
#     input:
#         contigs="analysis/{sample}/{readtype}/{label}/{assembler}/contigs.fasta"
#     params:
#         outdir="analysis/{sample}/{readtype}/{label}/{assembler}/quast"
#     log:
#         "analysis/{sample}/{readtype}/{label}/{assembler}/quast/quast.log"
#     shell:
#         """
#         quast.py {input.contigs} -o {params.outdir} > {log} 2>&1
#         """

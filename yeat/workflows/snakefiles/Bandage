# -------------------------------------------------------------------------------------------------
# Copyright (c) 2022, DHS. This file is part of YEAT: http://github.com/bioforensics/yeat
#
# This software was prepared for the Department of Homeland Security (DHS) by the Battelle National
# Biodefense Institute, LLC (BNBI) as part of contract HSHQDC-15-C-00064 to manage and operate the
# National Biodefense Analysis and Countermeasures Center (NBACC), a Federally Funded Research and
# Development Center.
# -------------------------------------------------------------------------------------------------

from glob import glob
from pathlib import Path
import re


def get_expected_files():
    inputlist = []
    for label in config["labels"]:
        assembler = config["assemblers"][label]
        for sample in config["label_to_samples"][label]:
            inputlist.append(f"analysis/{sample}/{label}/{assembler}/bandage/.done")
    return inputlist


rule all:
    input:
        get_expected_files()


rule spades:
    output:
        "analysis/{sample}/{label}/spades/bandage/.done"
    input:
        lambda wildcards:
            glob(f"analysis/{wildcards.sample}/{wildcards.label}/spades/*.gfa")
            + glob(f"analysis/{wildcards.sample}/{wildcards.label}/spades/*.fastg")
    run:
        for gfa in input:
            filename = Path(gfa).stem
            shell("Bandage image {gfa} analysis/{wildcards.sample}/{wildcards.label}/spades/bandage/{filename}.jpg")
        shell("touch {output[0]}")


def get_and_filter_contig_files(sample, label):
    pattern = rf"analysis/{sample}/{label}/megahit/intermediate_contigs/k\d+.contigs.fa"
    contigs = glob(rf"analysis/{sample}/{label}/megahit/intermediate_contigs/k*.contigs.fa")
    return filter(re.compile(pattern).match, contigs)


rule megahit:
    output:
        "analysis/{sample}/{label}/megahit/bandage/.done"
    input:
        lambda wildcards: get_and_filter_contig_files(wildcards.sample, wildcards.label)
    run:
        for fa in input:
            kmer = re.findall(r'k\d+.contigs.fa', fa)[0].split(".")[0][1:]
            filename = Path(fa).stem
            fastg = f"analysis/{wildcards.sample}/{wildcards.label}/megahit/intermediate_contigs/{filename}.fastg"
            shell("megahit_toolkit contig2fastg {kmer} {fa} > {fastg}")
            jpg = f"analysis/{wildcards.sample}/{wildcards.label}/megahit/bandage/{filename}.jpg"
            shell("Bandage image {fastg} {jpg}")
        shell("touch {output[0]}")


rule unicycler:
    output:
        "analysis/{sample}/{label}/unicycler/bandage/.done"
    input:
        lambda wildcards: glob(f"analysis/{wildcards.sample}/{wildcards.label}/unicycler/*.gfa")
    run:
        for gfa in input:
            filename = Path(gfa).stem
            shell("Bandage image {gfa} analysis/{wildcards.sample}/{wildcards.label}/unicycler/bandage/{filename}.jpg")
        shell("touch {output[0]}")


rule flye:
    output:
        "analysis/{sample}/{label}/flye/bandage/.done"
    input:
        lambda wildcards: 
            glob(f"analysis/{wildcards.sample}/{wildcards.label}/flye/30-contigger/*.gfa")
            + glob(f"analysis/{wildcards.sample}/{wildcards.label}/flye/40-polishing/*.gfa")
            + glob(f"analysis/{wildcards.sample}/{wildcards.label}/flye/*.gfa")
    run:
        for gfa in input:
            filename = Path(gfa).stem
            shell("Bandage image {gfa} analysis/{wildcards.sample}/{wildcards.label}/flye/bandage/{filename}.jpg")
        shell("touch {output[0]}")


rule canu:
    output:
        "analysis/{sample}/{label}/canu/bandage/.done"
    input:
        lambda wildcards: glob(f"analysis/{wildcards.sample}/{wildcards.label}/canu/unitigging/4-unitigger/*.gfa")
    run:
        for gfa in input:
            filename = Path(gfa).stem
            shell("Bandage image {gfa} analysis/{wildcards.sample}/{wildcards.label}/canu/bandage/{filename}.jpg")
        shell("touch {output[0]}")


rule hifiasm:
    output:
        "analysis/{sample}/{label}/hifiasm/bandage/.done"
    input:
        lambda wildcards: glob(f"analysis/{wildcards.sample}/{wildcards.label}/hifiasm/*.gfa")
    run:
        for gfa in input:
            filename = Path(gfa).stem
            shell("Bandage image {gfa} analysis/{wildcards.sample}/{wildcards.label}/hifiasm/bandage/{filename}.jpg")
        shell("touch {output[0]}")


rule hifiasm_meta:
    output:
        "analysis/{sample}/{label}/hifiasm-meta/bandage/.done"
    input:
        lambda wildcards: glob(f"analysis/{wildcards.sample}/{wildcards.label}/hifiasm-meta/*.gfa")
    run:
        for gfa in input:
            filename = Path(gfa).stem
            shell("Bandage image {gfa} analysis/{wildcards.sample}/{wildcards.label}/hifiasm-meta/bandage/{filename}.jpg")
        shell("touch {output[0]}")

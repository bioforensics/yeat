# -------------------------------------------------------------------------------------------------
# Copyright (c) 2023, DHS. This file is part of YEAT: http://github.com/bioforensics/yeat
#
# This software was prepared for the Department of Homeland Security (DHS) by the Battelle National
# Biodefense Institute, LLC (BNBI) as part of contract HSHQDC-15-C-00064 to manage and operate the
# National Biodefense Analysis and Countermeasures Center (NBACC), a Federally Funded Research and
# Development Center.
# -------------------------------------------------------------------------------------------------

from shutil import copyfile


def get_expected_files():
    inputlist = []
    for label in config["labels"]:
        assembler = config["assemblers"][label]
        for sample in config["label_to_samples"][label]:
            inputlist.append(f"analysis/{sample}/{label}/{assembler}/quast/{sample}_report.html")
    inputlist += expand("seq/input/{sample}/highQuality-reads.fq.gz", sample=[*config["samples"]])
    inputlist += expand("seq/input/{sample}/qc/{quality}_LengthvsQualityScatterPlot_dot.pdf", sample=[*config["samples"]], quality=["raw", "filtered"])
    return inputlist


rule all:
    input:
        get_expected_files()


def get_sample_reads(sample):
    reads = []
    for key, value in sample.items():
        reads += value
    return reads


rule copyinput:
    output:
        "seq/input/{sample}/combined-reads.fq.gz"
    input:
        lambda wildcards: get_sample_reads(config["samples"][wildcards.sample])
    params:
        lambda wildcards: f"seq/input/{wildcards.sample}/combined-reads.fq"
    run:
        for i, inread in enumerate(input):
            outread = f"seq/input/{wildcards.sample}/read{i}.fq"
            if inread.endswith(".gz"):
                shell("unzip -c {inread} > {outread}")
            else:
                copyfile(inread, outread)
        shell("cat seq/input/{wildcards.sample}/*.fq > {params[0]}")
        shell("gzip {params[0]}")


rule nanofilt:
    output:
        "seq/input/{sample}/highQuality-reads.fq.gz"
    input:
        "seq/input/{sample}/combined-reads.fq.gz"
    threads: 128
    shell:
        """
        # add support to customize nanofilt
        gunzip -c {input[0]} | Nanofilt -q 10 | gzip > {output[0]}
        """


rule nanoplot:
    output:
        "seq/input/{sample}/qc/{quality}_LengthvsQualityScatterPlot_dot.pdf"
    input:
        "seq/input/{sample}/combined-reads.fq.gz",
        "seq/input/{sample}/highQuality-reads.fq.gz"
    threads: 128
    params:
        qc_dir="seq/input/{sample}/qc"
    shell:
        """
        NanoPlot -t {threads} --fastq {input[0]} -o {params.qc_dir} --N50 -p raw_ --title "{wildcards.sample} Raw" -f pdf --plots dot
        NanoPlot -t {threads} --fastq {input[1]} -o {params.qc_dir} --N50 -p filtered_ --title "{wildcards.sample} Filtered" -f pdf --plots dot
        """


def get_readtype_flag(sample):
    readtypes = list(config["samples"][sample].keys())
    if readtypes[0] == "nano-raw":
        return "--nano-raw"
    elif readtypes[0] == "nano-corr":
        return "--nano-corr"
    elif readtypes[0] == "nano-hq":
        return "--nano-hq"


rule flye:
    output:
        contigs="analysis/{sample}/{label}/flye/{sample}_contigs.fasta"
    input:
        "seq/input/{sample}/highQuality-reads.fq.gz"
    threads: 128
    params:
        readtype_flag=lambda wildcards: get_readtype_flag(wildcards.sample),
        extra_args=lambda wildcards: config["extra_args"][wildcards.label]
    shell:
        """
        flye {params.readtype_flag} {input[0]} -t {threads} -o analysis/{wildcards.sample}/{wildcards.label}/flye {params.extra_args}
        ln -s assembly.fasta {output.contigs}
        """


rule canu:
    output:
        contigs="analysis/{sample}/{label}/canu/{sample}_contigs.fasta"
    input:
        "seq/input/{sample}/highQuality-reads.fq.gz"
    threads: 128
    params:
        extra_args=lambda wildcards: config["extra_args"][wildcards.label]
    shell:
        """
        canu -nanopore {input[0]} maxThreads={threads} -p {wildcards.sample} -d analysis/{wildcards.sample}/{wildcards.label}/canu {params.extra_args} useGrid=false
        ln -s {wildcards.sample}.contigs.fasta {output.contigs}
        """


rule quast:
    output:
        report="analysis/{sample}/{label}/{assembler}/quast/{sample}_report.html"
    input:
        contigs="analysis/{sample}/{label}/{assembler}/{sample}_contigs.fasta"
    shell:
        """
        quast.py {input.contigs} -o analysis/{wildcards.sample}/{wildcards.label}/{wildcards.assembler}/quast
        ln -s report.html {output.report}
        """

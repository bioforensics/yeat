# -------------------------------------------------------------------------------------------------
# Copyright (c) 2023, DHS. This file is part of YEAT: http://github.com/bioforensics/yeat
#
# This software was prepared for the Department of Homeland Security (DHS) by the Battelle National
# Biodefense Institute, LLC (BNBI) as part of contract HSHQDC-15-C-00064 to manage and operate the
# National Biodefense Analysis and Countermeasures Center (NBACC), a Federally Funded Research and
# Development Center.
# -------------------------------------------------------------------------------------------------

module helper:
    snakefile: "__init__.py"
    config: config

use rule * from helper


rule all:
    input:
        helper.get_expected_files(combined_qc=True)


module shared_workflow:
    snakefile: "Shared"
    config: config

use rule * from shared_workflow


def get_readtype_flag(sample, algorithm):
    readtype = config["sample_readtype"][sample]
    if algorithm == "flye":
        if readtype == "pacbio-raw":
            return "--pacbio-raw"
        elif readtype == "pacbio-corr":
            return "--pacbio-corr"
        elif readtype == "pacbio-hifi":
            return "--pacbio-hifi"
    elif algorithm == "canu":
        if readtype in ["pacbio-raw", "pacbio-corr"]:
            return "-pacbio"
        elif readtype == "pacbio-hifi":
            return "-pacbio-hifi"


rule flye:
    output:
        contigs="analysis/{sample}/{label}/flye/{sample}_contigs.fasta"
    input:
        reads="seq/input/{sample}/combined-reads.fq.gz"
    threads: 128
    params:
        readtype_flag=lambda wildcards: get_readtype_flag(wildcards.sample, "flye"),
        outdir=lambda wildcards: f"analysis/{wildcards.sample}/{wildcards.label}/flye",
        extra_args=lambda wildcards: config["extra_args"][wildcards.label]
    shell:
        """
        flye {params.readtype_flag} {input.reads} -t {threads} -o {params.outdir} {params.extra_args}
        ln -s assembly.fasta {output.contigs}
        """


rule canu:
    output:
        contigs="analysis/{sample}/{label}/canu/{sample}_contigs.fasta"
    input:
        reads="seq/input/{sample}/combined-reads.fq.gz"
    threads: 128
    params:
        readtype_flag=lambda wildcards: get_readtype_flag(wildcards.sample, "canu"),
        outdir=lambda wildcards: f"analysis/{wildcards.sample}/{wildcards.label}/canu",
        extra_args=lambda wildcards: config["extra_args"][wildcards.label]
    shell:
        """
        canu {params.readtype_flag} {input.reads} maxThreads={threads} -p {wildcards.sample} -d {params.outdir} {params.extra_args} useGrid=false
        ln -s {wildcards.sample}.contigs.fasta {output.contigs}
        """


rule hifiasm:
    output:
        contigs="analysis/{sample}/{label}/hifiasm/{sample}_contigs.fasta"
    input:
        reads="seq/input/{sample}/combined-reads.fq.gz"
    threads: 128
    params:
        prefix=lambda wildcards: f"analysis/{wildcards.sample}/{wildcards.label}/hifiasm/{wildcards.sample}",
        extra_args=lambda wildcards: config["extra_args"][wildcards.label]
    shell:
        """
        hifiasm -o {params.prefix} -t {threads} {params.extra_args} {input.reads}
        gfatools gfa2fa {params.prefix}.bp.p_ctg.gfa > {params.prefix}.bp.p_ctg.fa
        ln -s {wildcards.sample}.bp.p_ctg.fa {output.contigs}
        """


rule hifiasm_meta:
    output:
        contigs="analysis/{sample}/{label}/hifiasm-meta/{sample}_contigs.fasta"
    input:
        reads="seq/input/{sample}/combined-reads.fq.gz"
    threads: 128
    params:
        prefix=lambda wildcards: f"analysis/{wildcards.sample}/{wildcards.label}/hifiasm-meta/{wildcards.sample}",
        extra_args=lambda wildcards: config["extra_args"][wildcards.label]
    shell:
        """
        hifiasm_meta -o {params.prefix} -t {threads} {params.extra_args} {input.reads}
        gfatools gfa2fa {params.prefix}.p_ctg.gfa > {params.prefix}.p_ctg.fa
        ln -s {wildcards.sample}.p_ctg.fa {output.contigs}
        """


rule unicycler:
    output:
        contigs="analysis/{sample}/{label}/unicycler/{sample}_contigs.fasta"
    input:
        reads="seq/input/{sample}/combined-reads.fq.gz"
    threads: 128
    params:
        outdir=lambda wildcards: f"analysis/{wildcards.sample}/{wildcards.label}/unicycler",
        extra_args=lambda wildcards: config["extra_args"][wildcards.label]
    shell:
        """
        unicycler -l {input.reads} -t {threads} -o {params.outdir} {params.extra_args}
        ln -s assembly.fasta {output.contigs}
        """


rule metamdbg:
    output:
        contigs="analysis/{sample}/{label}/metamdbg/{sample}_contigs.fasta"
    input:
        reads="seq/input/{sample}/combined-reads.fq.gz"
    conda:
        "metaMDBG"
    threads: 128
    params:
        outdir=lambda wildcards: f"analysis/{wildcards.sample}/{wildcards.label}/metamdbg",
        extra_args=lambda wildcards: config["extra_args"][wildcards.label] #add extra_args....
    shell:
        """
        metaMDBG asm {params.outdir} {input.reads} -t {threads}
        gunzip {params.outdir}/contigs.fasta.gz
        ln -s contigs.fasta {output.contigs}
        """

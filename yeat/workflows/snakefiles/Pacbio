# -------------------------------------------------------------------------------------------------
# Copyright (c) 2023, DHS. This file is part of YEAT: http://github.com/bioforensics/yeat
#
# This software was prepared for the Department of Homeland Security (DHS) by the Battelle National
# Biodefense Institute, LLC (BNBI) as part of contract HSHQDC-15-C-00064 to manage and operate the
# National Biodefense Analysis and Countermeasures Center (NBACC), a Federally Funded Research and
# Development Center.
# -------------------------------------------------------------------------------------------------

module helper:
    snakefile: "__init__.py"
    config: config

use rule * from helper


rule all:
    input:
        helper.get_expected_files(pacbio_qc=True)


module long_workflow:
    snakefile: "Long"
    config: config

use rule * from long_workflow


def get_readtype_flag(sample, algorithm):
    readtypes = list(config["samples"][sample].keys())
    if algorithm == "flye":
        if readtypes[0] == "pacbio-raw":
            return "--pacbio-raw"
        elif readtypes[0] == "pacbio-corr":
            return "--pacbio-corr"
        elif readtypes[0] == "pacbio-hifi":
            return "--pacbio-hifi"
    elif algorithm == "canu":
        if readtypes[0] in ["pacbio-raw", "pacbio-corr"]:
            return "-pacbio"
        elif readtypes[0] == "pacbio-hifi":
            return "-pacbio-hifi"


rule flye:
    output:
        contigs="analysis/{sample}/{label}/flye/{sample}_contigs.fasta"
    input:
        "seq/input/{sample}/combined-reads.fq.gz"
    threads: 128
    params:
        readtype_flag=lambda wildcards: get_readtype_flag(wildcards.sample, "flye"),
        outdir=lambda wildcards: f"analysis/{wildcards.sample}/{wildcards.label}/flye",
        extra_args=lambda wildcards: config["extra_args"][wildcards.label]
    shell:
        """
        flye {params.readtype_flag} {input[0]} -t {threads} -o {params.outdir} {params.extra_args}
        ln -s assembly.fasta {output.contigs}
        """


rule canu:
    output:
        contigs="analysis/{sample}/{label}/canu/{sample}_contigs.fasta"
    input:
        "seq/input/{sample}/combined-reads.fq.gz"
    threads: 128
    params:
        readtype_flag=lambda wildcards: get_readtype_flag(wildcards.sample, "canu"),
        outdir=lambda wildcards: f"analysis/{wildcards.sample}/{wildcards.label}/canu",
        extra_args=lambda wildcards: config["extra_args"][wildcards.label]
    shell:
        """
        canu {params.readtype_flag} {input[0]} maxThreads={threads} -p {wildcards.sample} -d {params.outdir} {params.extra_args} useGrid=false
        ln -s {wildcards.sample}.contigs.fasta {output.contigs}
        """
